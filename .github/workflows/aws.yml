# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: eu-central-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: awstest           # set this to your Amazon ECR repository name
  #ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: awstest                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: dqsapp # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_FE: awstest-fe           # set this to the name of the container in the
  CONTAINER_NAME_BE: awstest-be
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # docker build -f Dockerfile_fe -t $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-fe .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-fe
        # echo "image_fe=$ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-fe" >> $GITHUB_OUTPUT
        
        docker build -f Dockerfile_be -t $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-be .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-be
        echo "image_be=$ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}-be" >> $GITHUB_OUTPUT
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: render-fe-task
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ./task-definition.json
    #     container-name: ${{ env.CONTAINER_NAME_FE }}
    #     image: ${{ steps.build-image.outputs.image_fe }}


    # - name: Modify Amazon ECS task definition with second container
    #   id: render-be-task
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ./task-definition.json
    #     container-name: ${{ env.CONTAINER_NAME_BE }}
    #     image: ${{ steps.build-image.outputs.image_be }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.render-be-task.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
